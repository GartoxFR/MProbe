'\" t
.\"     Title: glGetVertexAttribPointerv
.\"    Author: [FIXME: author] [see http://www.docbook.org/tdg5/en/html/author]
.\" Generator: DocBook XSL Stylesheets v1.79.2 <http://docbook.sf.net/>
.\"      Date: 05/21/2022
.\"    Manual: [FIXME: manual]
.\"    Source: [FIXME: source]
.\"  Language: English
.\"
.TH "GLGETVERTEXATTRIBPOI" "3G" "05/21/2022" "[FIXME: source]" "[FIXME: manual]"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
glGetVertexAttribPointerv \- return the address of the specified generic vertex attribute pointer
.SH "C SPECIFICATION"
.HP \w'void\ glGetVertexAttribPointerv('u
.BI "void glGetVertexAttribPointerv(GLuint\ " "index" ", GLenum\ " "pname" ", GLvoid\ **" "pointer" ");"
.SH "PARAMETERS"
.PP
\fIindex\fR
.RS 4
Specifies the generic vertex attribute parameter to be returned\&.
.RE
.PP
\fIpname\fR
.RS 4
Specifies the symbolic name of the generic vertex attribute parameter to be returned\&. Must be
\fBGL_VERTEX_ATTRIB_ARRAY_POINTER\fR\&.
.RE
.PP
\fIpointer\fR
.RS 4
Returns the pointer value\&.
.RE
.SH "DESCRIPTION"
.PP
\fBglGetVertexAttribPointerv\fR
returns pointer information\&.
\fIindex\fR
is the generic vertex attribute to be queried,
\fIpname\fR
is a symbolic constant indicating the pointer to be returned, and
\fIparams\fR
is a pointer to a location in which to place the returned data\&.
.PP
The
\fIpointer\fR
returned is a byte offset into the data store of the buffer object that was bound to the
\fBGL_ARRAY_BUFFER\fR
target (see
\fBglBindBuffer\fR()) when the desired pointer was previously specified\&.
.SH "NOTES"
.PP
The state returned is retrieved from the currently bound vertex array object\&.
.PP
The initial value for each pointer is 0\&.
.SH "ERRORS"
.PP
\fBGL_INVALID_OPERATION\fR
is generated if no vertex array object is currently bound\&.
.PP
\fBGL_INVALID_VALUE\fR
is generated if
\fIindex\fR
is greater than or equal to
\fBGL_MAX_VERTEX_ATTRIBS\fR\&.
.PP
\fBGL_INVALID_ENUM\fR
is generated if
\fIpname\fR
is not an accepted value\&.
.SH "ASSOCIATED GETS"
.PP
\fBglGet\fR()
with argument
\fBGL_MAX_VERTEX_ATTRIBS\fR
.SH "VERSION SUPPORT"
.TS
allbox tab(:);
lB cB s s s s s s s s s s s
lB cB cB cB cB cB cB cB cB cB cB cB cB.
T{

T}:T{
\fBOpenGL Version\fR
T}
T{
\fBFunction / Feature Name\fR
T}:T{
\fB2\&.0\fR
T}:T{
\fB2\&.1\fR
T}:T{
\fB3\&.0\fR
T}:T{
\fB3\&.1\fR
T}:T{
\fB3\&.2\fR
T}:T{
\fB3\&.3\fR
T}:T{
\fB4\&.0\fR
T}:T{
\fB4\&.1\fR
T}:T{
\fB4\&.2\fR
T}:T{
\fB4\&.3\fR
T}:T{
\fB4\&.4\fR
T}:T{
\fB4\&.5\fR
T}
.T&
l c c c c c c c c c c c c.
T{
\fBglGetVertexAttribPointerv\fR
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}:T{
✔
T}
.TE
.sp 1
.SH "SEE ALSO"
.PP
\fBglGetVertexAttrib\fR(),
\fBglVertexAttribPointer\fR()
.SH "COPYRIGHT"
.PP
Copyright
\(co
2003\-2005 3Dlabs Inc\&. Ltd\&. Copyright
\(co
2010\-2014 Khronos Group\&. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1\&.0, 8 June 1999\&.
\m[blue]\fBhttp://opencontent\&.org/openpub/\fR\m[]\&.
.SH "COPYRIGHT"
.br
Copyright \(co 2003-2005 3Dlabs Inc. Ltd.
.br
Copyright \(co 2010-2014 Khronos Group
.br
