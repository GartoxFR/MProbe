* TODO
  - (x) Lire rapport
  - (x) Lire papiers cités
  -- (x) An Empirical Comparison of 7 Programming Languages
  -- (x) A Comparative Study of Programming Languages in Rosetta Code
  -- (x) Informatique et société

  - (x) Hello world rust

  - (x) Allouer X octets dont on écrit Y octets
  -- (x) Écrire le programme
  -- (x) Tester avec `time -v`

  - (x) Optimiser outils
  -- (x) Associer à chaque mesure son "round" = tour de boucle de l'echantillonage
  -- (x) Pas de multithread donc buffer de lecture global
  -- (x) Redecouvrir tous les process à chaque fois

  - (x) Remplacer linux par toolchain rust

  - (x) Ecrire le programme `hello_world` en plusieurs languages

  - (x) Rechercher comment faire les courbes
  -- (x) Tester bindings Rust matplotlib
  -- (x) Tester R
  -- (x) Tester pure rust (charts crate ou autre (plotters))

  - (x) Interface utilisateur de l'outil
  -- (x) Pouvoir tout lancer d'un coup (p-e makefile)
  -- (x) Pouvoir spécifier le nom des fichiers de sortie
  -- (x) Readme sur comment utiliser le Makefile

  - (x) Lire papier de la biblio

  - (x) Ameliorer visualation
  -- (x) Ajouter la commande surveillée en guise de titre
  -- (x) Adapter les unités sur le temps
  -- (x) Adapter les unités sur la mémoire (MiB etc..)
  -- (x) Regarder du coté des axes logarithmiques (Possible mais pas très concluant)
  -- (x) Mediane et 90e percentile a la place de la moyenne

  - (x) Ecrire le programme `allocations` en plusieurs languages (allouer 2Go et écrire 1Go par défaut)
  -- (x) C
  -- (x) CPP
  -- (x) Java
  -- (x) Python

  - (x) Pour C et CPP, mettre O2 ou O3

  - (-) Autres toolchain
  -- (x) gcc
  -- (x) g++
  -- (x) CPython
  -- ( ) JVM

  - (x) Lire "Reflections on truting trust" de Ken THOMPSON

  - (_) Pour bootsraper cpp regarder {https://bootstrappable.org/}[Site]
  - (_) Mesurer des bootstrap qui partent de TCC
  -- (_) TCC -> CPython
  -- (_) TCC -> Rust = TCC -> GCC entierement en C mais qui compile cpp -> GCC récent -> LLVM et rustc

  - (x) Réduire taille JSON
  -- (x) Sommer les conso des processus
  -- (x) Sous échantillonner à la volé

  - (x) Prioriser seulement le j1

  - (x) À la visualation, compter les "missed samples" et leur proportion

  - (x) Mesurer la compilation de TCC par lui même

  - (x) Dorenavant GCC = C et CPP

  - (x) Mesurer LLVM

  - ( ) Essayer CPython par TCC en creusant un peu
  - (x) Capture et horodatage des logs
  -- (x) GCC with logs
  -- (x) Clang with logs
  -- (x) rust LLVM with logs
  -- (x) rustc with logs
  -- (x) tcc with logs
  -- (x) CPython with logs
  - (-) Programme tf idf pour chaque langage
  -- (x) Rust
  -- (x) C++
  -- ( ) C
  -- (x) Python
  -- (x) Java

  - Découpler code de l'expe : pouvoir lancer plusieurs expé sur le même code


  - (_) Ajouter aux metadata :
  -- (_) Nombre max de process observé lors d'un round
  -- (_) Durée du plus long round


* Notes
  - {:notes-debut:}[Notes debut du stage]
  - {:etude-procfs:}[Etude du format de retour du procfs]
  - {:recherche-biblio:}[Recherche bilblio]
  - {:recherche-plot:}[Recherche sur les librairies pour les figures]
  - {:smaps-overhead:}[Probleme avec smaps]
  - {:toolchains:}[Notes sur les toolchains]
  

* Meetings
  - {@ Thursday 20 July 2023} 10h
  - {@ Wednesday 26 July 2023} 14h
  - {@ Monday 21 August 2023} 10h

* Idées
** Aggrégation des donnés des différents process

   - On choisit la durée d'un timestep 
   - On parcours les timesteps et, pour chaque processus, on prend sa
     consommation max durant ce timestep pour la sommer à la consommation de ce
     timestep.

** Systeme de round à l'echantillonage

   - Associer à chaque mesure son "round" = tour de boucle de l'echantillonage

** Idees d'optimisations

   - Pas de multithread donc buffer de lecture global
   - Redecouvrir tous les process à chaque fois

