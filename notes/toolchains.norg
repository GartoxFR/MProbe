* Méthodologie

** Toolchain de type 1

   On appelle toolchain de type 1 celle qui sont self-hosted. C'est à dire que 
   la toolchain est capable de compiler son propre code source. 

*** Quoi mesurer ?

    Pour ces toolchain, il est intéressant de mesurer la compilation de son
    code source par la toolchain produite par ce code source.


*** Comment ?

    ~ Avoir une version de la toolchain produite par les sources dont l'on veut mesurer la compilation 
    ~~ Compilation multistage (bootstrap) à partir d'un compilateur quelconque compatible
    ~~ Installation du résultat dans un dossier spécifique
    ~ Mesure de la compilation en -j1 de la toolchain en utilisant celle tout juste bootstrapée

*** Influence du compilateur utilisé pour le bootstrap 

    Avec cette méthode, le compilateur utilisé pour le stage0 du bootstrap n'a aucun impact, ce
    qui rend cette expérience plus reproductible

** Toolchain de type 2

   On appelle toolchain de type 2 celle qui ne peuvent pas compiler leur propre code sources.
   Par exemple CPython.

*** Quoi mesurer ?

    On est obligé de considérer la compilation de la toolchain X par une toolchain Y à choisir.

*** Influence de la toolchain Y

    Les optimisation que peut réaliser la toolchain Y peut donc influencer la compilation 
    de ce qui nous intéresse. 

    Par exemple, compiler CPython avec un compilateur C non optimisant coûtera sûrement moins cher
    que le compiler avec les optimisation, et ce indépendemment de la version de CPython étudiée

* Environnement de mesure
** Matériel
   - 16 coeurs
   - 128GB de RAM

** Système d'exploitation
   `uname -a`
   > Linux luuna 5.10.0-15-amd64 #1 SMP Debian 5.10.120-1 (2022-06-09) x86_64 GNU/Linux


** Outils de compilation

   Notre serveur de calcul possède déjà certains outils que nous ne recompileront pas. Ces outils
   proviennent des repository Debian.

*** Make
    `make --version`
    > GNU Make 4.3 

*** Ninja 
    `ninja --version`
    > 1.10.1

*** CMake
    `cmake --version`
    > cmake version 3.18.4

* Toolchains

**  Clang + lld + LLVM

*** Description

    - Clang es le frontend C/C++ de LLVM. Il ne fait donc pas sens 
    de le compiler sans LLVM. Les deux réunis forment une toolchain 
    de type 1. 
    - lld est linker de LLVM, needed because we want a full usable toolchain

*** Version 

    - LLVM `16.0.2` (Même que pour rust)
    - Clang `16.0.2` 

*** Sources

    - Download : {https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.2/llvm-project-16.0.2.src.tar.xz}
    - sha256 : 6d8acae041ccd34abe144cda6eaa76210e1491f286574815b7261b3f2e58734c

*** Commands
**** Bootstrap 
     @code bash
     cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
     -DCLANG_ENABLE_BOOTSTRAP=On \
     -DCLANG_BOOTSTRAP_PASSTHROUGH="CMAKE_INSTALL_PREFIX;CMAKE_VERBOSE_MAKEFILE" \
     -DLLVM_ENABLE_PROJECTS="clang;lld" \
     -DCMAKE_INSTALL_PREFIX=/data/ewan/clang/out \
     ../llvm-project-16.0.2/llvm

     ninja stage2 install
     @end

**** Mesure
     @code bash
     cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
     -DLLVM_ENABLE_PROJECTS="clang;lld" \
     -DCMAKE_C_COMPILER="/data/ewan/clang/out/bin/clang" \
     -DCMAKE_CXX_COMPILER="/data/ewan/clang/out/bin/clang++" \
     -DCMAKE_AR="/data/ewan/clang/out/bin/llvm-ar" \
     -DLLVM_USE_LINKER="/data/ewan/clang/out/bin/ld.lld" \
     -DCMAKE_INSTALL_PREFIX=/data/ewan/clang/mesure_out \
     ../llvm-project-16.0.2/llvm

     mprobe --method rss -o /data/ewan/results/clang.json \
     -s 100000  \
     --title "Compilation de clang" \
     -- ninja -j 1
     @end

** Rustc
*** Description 

    `rustc` est un le compilateur de rust. Il utilise LLVM comme backend.
    `rustc` êtant écrit en rust, on le considère comme une toolchain de type 1.
    
*** Version

    - rustc : `1.70.0`
    - LLVM : `16.0.2`

*** Sources 
  
    @code bash
    git clone https://github.com/rust-lang/rust.git --depth 1 --single-branch --branch=1.70.0 
    cd rust
    git submodule update --init --depth 1 src/llvm-project
    @end

*** Méthodologie

    ~ On mesure la compilation de LLVM patché par rust (même version que le LLVM utilisé pour clang
      mais avec des patch supplémentaire) en utilisant notre `clang` compilé pour l'expérience {** Clang + lld + LLVM}
    ~ On bootstrap rust afin d'avoir les artéfacts stage2 (rustc compilé par lui même)
    ~ On mesure la compilation d'un stage3 (rustc + libstd) à partir de notre artéfact stage2
    ~ (Optional) On compare notre stage3 et stage2 afin de s'assurer qu'on à mesuré ce que l'on cherchait


*** Commandes

  Ces étapes doivent être réalisée dans l'ordre au moins une fois.
    
**** Mesure LLVM
     @code bash
     rm -rf build/x86_64-unknown-linux-gnu/llvm

     ./configure --set llvm.download-ci-llvm=false \
     --set target.x86_64-unknown-linux-gnu.cc=/data/ewan/clang/out/bin/clang \
     --set target.x86_64-unknown-linux-gnu.cxx=/data/ewan/clang/out/bin/clang++ \
     --set target.x86_64-unknown-linux-gnu.ar=/data/ewan/clang/out/bin/llvm-ar \
     --set build.full-bootstrap=true

     mprobe --method rss -o /data/ewan/results/llvm-rust.json \
     -s 100000  \
     --title "Compilation de LLVM pour Rust" \
     -- ./x build llvm -j 1
     @end
    
**** Bootstrap rustc
     @code bash
     ./x clean

     ./x build --stage 2 library
     @end

**** Mesure rustc

     S'assurer que les stage1 et 2 sont déjà présents

     @code bash
     rm -rf build/x86_64-unknown-linux-gnu/stage3*

     mprobe --method rss -o /data/ewan/results/rustc.json \
     -s 100000  \
     --title "Compilation de rustc" \
     -- ./x build --stage 3 library -j 1
     @end

     Puisque l'on ne possède ici qu'une librairie stage3 avec le compilateur stage2,
     cette commande va d'abord build le compilateur stage3 avant de build la librairie
     stage4. On mesure ainsi bien la compilation de rustc + librairie

** GCC
*** Description

    GCC est la collection de compilateur de GNU. C'est donc la toolchain
    la plus utilisée par les distribution GNU/Linux. Nous nous intéressons
    pour notre étude aux compilateurs C/C++ de GCC. Avec ces deux languages,
    on peut considérer GCC comme une toolchain de type1

*** Version
    - GCC `11.4.0`

*** Sources
    - Download - {https://ftp.gnu.org/gnu/gcc/gcc-11.4.0/gcc-11.4.0.tar.gz}
    - sha256 - af828619dd1970734dda3cfb792ea3f2cba61b5a00170ba8bce4910749d73c07
    
*** Commandes
**** Télécharger dépendances
     @code bash
     contrib/download_prerequisites
     @end
**** Bootstrap
     @code bash
     ../gcc-11.4.0/configure \
     --enable-multilib \
     --prefix=/data/ewan/gcc/out \
     --disable-bootstrap \
     --build=x86_64-pc-linux-gnu \
     --host=x86_64-pc-linux-gnu \
     --target=x86_64-pc-linux-gnu \
     --enable-ld=yes \
     --enable-languages=c,c++

     make -j && make install
     @end
**** Mesure
     @code bash
     export LD_LIBRARY_PATH=/data/ewan/gcc/out/lib:/data/ewan/gcc/out/lib64/lib

     CC=/data/ewan/gcc/out/bin/gcc \
     CXX=/data/ewan/gcc/out/bin/g++ \
     LDFLAGS="-L/data/ewan/gcc/out/lib -L/data/ewan/gcc/out/lib64/lib" \
     ../gcc-11.4.0/configure --disable-multilib \
     --prefix=/data/ewan/gcc/out \
     --enable-ld=yes \
     --build=x86_64-pc-linux-gnu \
     --host=x86_64-pc-linux-gnu \
     --target=x86_64-pc-linux-gnu \
     --disable-bootstrap \
     --enable-languages=c,c++

     mprobe --method rss -o /data/ewan/results/gcc.json \
     -s 100000  \
     --title "Compilation de gcc" \
     -- make -j 1 
     @end

*** Problemes

    Cette expérience ne prend pas en compte la compilation des binutils
    (ld, as, objdump, ar.....) et se basent sur celle du système hôte
** TCC
*** Description
    Tiny C Compiler (TCC) est compilateur C se voulant léger et
    rapide. Il supporte ANSI et la plupart du standart ISO C99.
    Il est capable de se compiler lui même, c'est donc un compilateur
    de type1

*** Version
    - TCC `0.9.27`
 
*** Sources
    - Download - {https://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27.tar.bz2}
    - sha256 - de23af78fca90ce32dff2dd45b3432b2334740bb9bb7b05bf60fdbfc396ceb9c

*** Commandes
**** Bootstrap
     @code bash
     ../tcc-0.9.27/configure \
     --prefix=/data/ewan/tcc/stage1 \

     make -j && make install
     rm -rf *

     ../tcc-0.9.27/configure \
     --prefix=/data/ewan/tcc/out \
     --cc=/data/ewan/tcc/stage1/bin/tcc

     make -j && make install
     @end

**** Mesure
     @code bash 
     ../tcc-0.9.27/configure \
     --cc=/data/ewan/tcc/out/bin/tcc

     # Plus de points que les autres car compilation bien plus courte  
     mprobe --method rss -o /data/ewan/results/tcc.json \
     -s 1000  \
     --title "Compilation de tcc" \
     -- make -j 1 

     @end
** CPython
*** Description
    CPython est une implémentation de Python écrite en C. C'est une toolchain
    de type 2. On propose donc de mesurer sa compilation à l'aide de gcc et clang
    en prenant les version dont la compilation à été mesurée précédemment.

*** Version
    - CPython `3.8`


*** Sources
    - Download - {https://github.com/python/cpython/archive/refs/heads/3.8.tar.gz}
    - sha256 - 174e8c544c7decb32c5ff200281916808bb0277f98d1670f359de8d3cef33b62

*** Commandes
**** Mesure avec gcc

     @code bash
     CC=/data/ewan/gcc/out/bin/gcc \
     ../cpython-3.8/configure

     mprobe --method rss -o /data/ewan/results/cpython_gcc.json \
     -s 10000  \
     --title "Compilation de cpython avec gcc" \
     -- make -j 1 
     @end

**** Mesure avec clang
     @code bash
     CC=/data/ewan/clang/out/bin/clang \
     ../cpython-3.8/configure

     mprobe --method rss -o /data/ewan/results/cpython_clang.json \
     -s 10000  \
     --title "Compilation de cpython avec clang" \
     -- make -j 1 
    
     @end
